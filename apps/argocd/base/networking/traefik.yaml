apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: traefik
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: networking
  source:
    repoURL: https://github.com/traefik/traefik-helm-chart.git
    path: traefik
    targetRevision: v26.0.0
    helm:
      releaseName: traefik
      values: |
        ports:
          traefik:
            port: 9000
            # -- Use hostPort if set.
            # hostPort: 9000
            #
            # -- Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which
            # means it's listening on all your interfaces and all your IPs. You may want
            # to set this value if you need traefik to listen on specific interface
            # only.
            # hostIP: 192.168.100.10

            # Defines whether the port is exposed if service.type is LoadBalancer or
            # NodePort.
            #
            # -- You SHOULD NOT expose the traefik port on production deployments.
            # If you want to access it from outside your cluster,
            # use `kubectl port-forward` or create a secure ingress
            expose: false
            # -- The exposed port for this service
            exposedPort: 9000
            # -- The port protocol (TCP/UDP)
            protocol: TCP
            # -- Defines whether the port is exposed on the internal service;
            # note that ports exposed on the default service are exposed on the internal
            # service by default as well.
            exposeInternal: false
          web:
            ## -- Enable this entrypoint as a default entrypoint. When a service doesn't explicitly set an entrypoint it will only use this entrypoint.
            # asDefault: true
            port: 8000
            # hostPort: 8000
            # containerPort: 8000
            expose: true
            exposedPort: 80
            ## -- Different target traefik port on the cluster, useful for IP type LB
            # targetPort: 80
            # The port protocol (TCP/UDP)
            protocol: TCP
            # -- Use nodeport if set. This is useful if you have configured Traefik in a
            # LoadBalancer.
            # nodePort: 32080
            # -- Defines whether the port is exposed on the internal service;
            # note that ports exposed on the default service are exposed on the internal
            # service by default as well.
            exposeInternal: false
            # Port Redirections
            # Added in 2.2, you can make permanent redirects via entrypoints.
            # https://docs.traefik.io/routing/entrypoints/#redirection
            # redirectTo:
            #   port: websecure
            #   (Optional)
            #   priority: 10
            #
            # Trust forwarded  headers information (X-Forwarded-*).
            # forwardedHeaders:
            #   trustedIPs: []
            #   insecure: false
            #
            # Enable the Proxy Protocol header parsing for the entry point
            # proxyProtocol:
            #   trustedIPs: []
            #   insecure: false
          websecure:
            ## -- Enable this entrypoint as a default entrypoint. When a service doesn't explicitly set an entrypoint it will only use this entrypoint.
            # asDefault: true
            port: 8443
            # hostPort: 8443
            # containerPort: 8443
            expose: true
            exposedPort: 443
            ## -- Different target traefik port on the cluster, useful for IP type LB
            # targetPort: 80
            ## -- The port protocol (TCP/UDP)
            protocol: TCP
            # nodePort: 32443
            # -- Defines whether the port is exposed on the internal service;
            # note that ports exposed on the default service are exposed on the internal
            # service by default as well.
            exposeInternal: false
            ## -- Specify an application protocol. This may be used as a hint for a Layer 7 load balancer.
            # appProtocol: https
            #
            ## -- Enable HTTP/3 on the entrypoint
            ## Enabling it will also enable http3 experimental feature
            ## https://doc.traefik.io/traefik/routing/entrypoints/#http3
            ## There are known limitations when trying to listen on same ports for
            ## TCP & UDP (Http3). There is a workaround in this chart using dual Service.
            ## https://github.com/kubernetes/kubernetes/issues/47249#issuecomment-587960741
            http3:
              enabled: false
            # advertisedPort: 4443
            #
            ## -- Trust forwarded  headers information (X-Forwarded-*).
            # forwardedHeaders:
            #   trustedIPs: []
            #   insecure: false
            #
            ## -- Enable the Proxy Protocol header parsing for the entry point
            # proxyProtocol:
            #   trustedIPs: []
            #   insecure: false
            #
            ## Set TLS at the entrypoint
            ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
            tls:
              enabled: true
              # this is the name of a TLSOption definition
              options: ""
              certResolver: ""
              domains: []
              # - main: example.com
              #   sans:
              #     - foo.example.com
              #     - bar.example.com
            #
            # -- One can apply Middlewares on an entrypoint
            # https://doc.traefik.io/traefik/middlewares/overview/
            # https://doc.traefik.io/traefik/routing/entrypoints/#middlewares
            # -- /!\ It introduces here a link between your static configuration and your dynamic configuration /!\
            # It follows the provider naming convention: https://doc.traefik.io/traefik/providers/overview/#provider-namespace
            # middlewares:
            #   - namespace-name1@kubernetescrd
            #   - namespace-name2@kubernetescrd
            middlewares: []
        logs:
          general:
            # -- By default, the logs use a text format (common), but you can
            # also ask for the json format in the format option
            # format: json
            # By default, the level is set to ERROR.
            # -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
            level: INFO
        ingressClass:
          enabled: true
          isDefaultClass: true
          name: traefik-internal
        providers:
          kubernetesIngress:
            enabled: true
            ingressClass: traefik-internal
          kubernetesCRD:
            enabled: true
            ingressClass: traefik-internal
            allowCrossNamespace: true
        globalArguments:
          - "--global.checknewversion=false"
          - "--global.sendanonymoususage=false"
          - "--entrypoints.kuma.address=:3001/tcp"
        # ingressRoute:
        #   dashboard:
        #     enabled: true
        #     matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        #     entryPoints: ["traefik"]
        service:
          externalIPs: ["192.168.1.40"]
  destination:
    namespace: kube-system
    name: in-cluster
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    managedNamespaceMetadata:
      labels:
        prometheus: enabled
    syncOptions:
    - Validate=false
    - CreateNamespace=false
    - Prune=true
    - RespectIgnoreDifferences=true
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 60s
        factor: 2
        maxDuration: 15m
