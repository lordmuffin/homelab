version: '3'
vars:
  PATH_ERROR: is not installed or correctly configured in PATH.
  CLOUDFLARED_DEFAULT_PATH: /home/k3s/.cloudflared

silent: true

tasks:
  democratic-csi-driver-config:
    desc: Creates a democratic-csi driver-config secret on Kubernetes.
    preconditions:
    - sh: "which kubectl"
      msg: "kubectl {{.PATH_ERROR}}"
    cmds:
    - kubectl delete secret democratic-csi-driver-config -n democratic-csi
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: democratic-csi-driver-config
        namespace: democratic-csi
      stringData:
        driver-config-file.yaml: |-
          driver: freenas-api-iscsi
          instance_id:
          httpConnection:
            protocol: https
            host: 192.168.1.10
            port: 443
            # use only 1 of apiKey or username/password
            # if both are present, apiKey is preferred
            # apiKey is only available starting in TrueNAS-12
            apiKey: "$APITOKEN"
            # username: root
            # password:
            allowInsecure: true
            # use apiVersion 2 for TrueNAS-12 and up (will work on 11.x in some scenarios as well)
            # leave unset for auto-detection
            #apiVersion: 2
          zfs:
            # can be used to override defaults if necessary
            # the example below is useful for TrueNAS 12
            #cli:
            #  sudoEnabled: true
            #
            #  leave paths unset for auto-detection
            #  paths:
            #    zfs: /usr/local/sbin/zfs
            #    zpool: /usr/local/sbin/zpool
            #    sudo: /usr/local/bin/sudo
            #    chroot: /usr/sbin/chroot

            # can be used to set arbitrary values on the dataset/zvol
            # can use handlebars templates with the parameters from the storage class/CO
            #datasetProperties:
            #  "org.freenas:test2": "some value"

            # total volume name (zvol/<datasetParentName>/<pvc name>) length cannot exceed 63 chars
            # https://www.ixsystems.com/documentation/freenas/11.2-U5/storage.html#zfs-zvol-config-opts-tab
            # standard volume naming overhead is 46 chars
            # datasetParentName should therefore be 17 chars or less when using TrueNAS 12 or below (SCALE and 13+ do not have the same limits)
            # for work-arounds see https://github.com/democratic-csi/democratic-csi/issues/54
            datasetParentName: NAS-Share/k8s/iSCSI
            # do NOT make datasetParentName and detachedSnapshotsDatasetParentName overlap
            # they may be siblings, but neither should be nested in the other
            # do NOT comment this option out even if you don't plan to use snapshots, just leave it with dummy value
            detachedSnapshotsDatasetParentName: tanks/k8s/b/snaps
            # "" (inherit), lz4, gzip-9, etc
            zvolCompression:
            # "" (inherit), on, off, verify
            zvolDedup:
            zvolEnableReservation: false
            # 512, 1K, 2K, 4K, 8K, 16K, 64K, 128K default is 16K
            zvolBlocksize:
          iscsi:
            targetPortal: "192.168.1.10:3260"
            # for multipath
            # targetPortals: [] # [ "server[:port]", "server[:port]", ... ]
            # leave empty to omit usage of -I with iscsiadm
            interface:

            # MUST ensure uniqueness
            # full iqn limit is 223 bytes, plan accordingly
            namePrefix: csi-
            nameSuffix: "-clustera"

            # add as many as needed
            targetGroups:
              # get the correct ID from the "portal" section in the UI
              - targetGroupPortalGroup: 1
                # get the correct ID from the "initiators" section in the UI
                targetGroupInitiatorGroup: 1
                # None, CHAP, or CHAP Mutual
                targetGroupAuthType: None
                # get the correct ID from the "Authorized Access" section of the UI
                # only required if using Chap
                targetGroupAuthGroup:

            extentInsecureTpc: true
            extentXenCompat: false
            extentDisablePhysicalBlocksize: true
            # 512, 1024, 2048, or 4096,
            extentBlocksize: 512
            # "" (let FreeNAS decide, currently defaults to SSD), Unknown, SSD, 5400, 7200, 10000, 15000
            extentRpm: "SSD"
            # 0-100 (0 == ignore)
            extentAvailThreshold: 0
      EOF
    ignore_error: true

  democratic-csi-nfs-driver-config:
    desc: Creates a democratic-csi NFS driver-config secret on Kubernetes.
    preconditions:
    - sh: "which kubectl"
      msg: "kubectl {{.PATH_ERROR}}"
    cmds:
    - kubectl delete secret democratic-csi-nfs-driver-config -n democratic-csi
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: democratic-csi-nfs-driver-config
        namespace: democratic-csi
      stringData:
        driver-config-file.yaml: |-
          driver: freenas-api-nfs
          instance_id:
          httpConnection:
            protocol: https
            host: 192.168.1.10
            port: 443
            # use only 1 of apiKey or username/password
            # if both are present, apiKey is preferred
            # apiKey is only available starting in TrueNAS-12
            apiKey: "$APITOKEN"
            # username: root
            # password:
            allowInsecure: true
            # use apiVersion 2 for TrueNAS-12 and up (will work on 11.x in some scenarios as well)
            # leave unset for auto-detection
            #apiVersion: 2
          sshConnection:
            host: server address
            port: 22
            username: root
            # use either password or key
            password: ""
            privateKey: |
              -----BEGIN RSA PRIVATE KEY-----
              ...
              -----END RSA PRIVATE KEY-----
          zfs:
            # can be used to override defaults if necessary
            # the example below is useful for TrueNAS 12
            #cli:
            #  sudoEnabled: true
            #
            #  leave paths unset for auto-detection
            #  paths:
            #    zfs: /usr/local/sbin/zfs
            #    zpool: /usr/local/sbin/zpool
            #    sudo: /usr/local/bin/sudo
            #    chroot: /usr/sbin/chroot

            datasetParentName: tank/k8s/a/vols
            # do NOT make datasetParentName and detachedSnapshotsDatasetParentName overlap
            # they may be siblings, but neither should be nested in the other
            # do NOT comment this option out even if you don't plan to use snapshots, just leave it with dummy value
            detachedSnapshotsDatasetParentName: tank/k8s/a/snaps
            datasetEnableQuotas: true
            datasetEnableReservation: false
            datasetPermissionsMode: "0777"
            datasetPermissionsUser: 0
            datasetPermissionsGroup: 0
            #datasetPermissionsAcls:
            #- "-m everyone@:full_set:allow"
            #- "-m u:kube:full_set:allow"

          nfs:
            shareHost: 192.168.1.10
            shareAlldirs: false
            shareAllowedHosts: []
            shareAllowedNetworks: []
            shareMaprootUser: root
            shareMaprootGroup: wheel
            shareMapallUser: ""
            shareMapallGroup: ""
      EOF
    ignore_error: true

  cloudflared:
    desc: Creates a Cloudflard tunnel and a secret to auth you Cloudflard pod proxy on Kubernetes.
    preconditions:
    - sh: "which kubectl"
      msg: "kubectl {{.PATH_ERROR}}"
    - sh: "which cloudflared"
      msg: "cloudflared {{.PATH_ERROR}}"
    summary: |
      Creates a Cloudflare tunnel and a secret to auth you Cloudflard pod proxy on Kubernetes.

      Usage: task secrets:cloudflared -- YOUR_TUNNEL_NAME YOUR_KUBERNETES_NAMESPACE
      Example: task secrets:cloudflared -- argo-tunnel argocd

      It is important to note you cannot use quotes or spaces in any of those two variables.
      You also need to be logged in with the user that is going to be running cloudflared.
    cmds:
    - kubectl delete secret {{(split " " .CLI_ARGS)._0}} -n {{(split " " .CLI_ARGS)._1}}
    - |
      tunnel_id=$(echo "$(cloudflared tunnel create {{(split " " .CLI_ARGS)._0}})" | grep -o -P '(?<=with id ).*' | awk '{print $1}') && \
      echo -e "${tunnel_id}" && \
      kubectl create secret generic {{(split " " .CLI_ARGS)._0}} --from-file=credentials.json=/${USER}/.cloudflared/${tunnel_id}.json -n {{(split " " .CLI_ARGS)._1}}
    ignore_error: true

  n8n:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: n8n-vars
        namespace: services
      stringData:
        N8N_SMTP_HOST: "$SMTP_HOST"
        N8N_SMTP_PORT: "$SMTP_PORT"
        N8N_SMTP_USER: "$SMTP_USER"
        N8N_SMTP_PASS: "$SMTP_PASS"
        N8N_BASIC_AUTH_USER: "$N8N_BASIC_AUTH_USER"
        N8N_BASIC_AUTH_PASSWORD: "$N8N_BASIC_AUTH_PASSWORD"
        N8N_ENCRYPTION_KEY: "$N8N_ENCRYPTION_KEY"
        DB_POSTGRESDB_DATABASE: "$DB_POSTGRESDB_DATABASE"
        DB_POSTGRESDB_HOST: "$DB_POSTGRESDB_HOST"
        DB_POSTGRESDB_PORT: "$DB_POSTGRESDB_PORT"
      EOF
    ignore_error: true

  kuma:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: kuma-vars
        namespace: monitoring
      stringData:
        UPTIME_KUMA_CLOUDFLARED_TOKEN: "$UPTIME_KUMA_CLOUDFLARED_TOKEN"
      EOF
    ignore_error: true

  poller:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: unifi-poller-vars
        namespace: unifi
      stringData:
        UP_UNIFI_DEFAULT_URL: "$UP_UNIFI_DEFAULT_URL"
        UP_UNIFI_DEFAULT_USER: "$UP_UNIFI_DEFAULT_USER"
        UP_UNIFI_DEFAULT_PASS: "$UP_UNIFI_DEFAULT_PASS"
      EOF
    ignore_error: true

  botkube:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: botkube-vars
        namespace: monitoring
      stringData:
        comm_config.yaml: |
          communications:
              'default-group':
                slack:
                  enabled: false
                socketSlack:
                  enabled: false
                mattermost:
                  enabled: false
                teams:
                  enabled: false
                discord:
                  enabled: true
                  token: '$BOTKUBE_DISCORD_TOKEN'
                  botID: '$BOTKUBE_DISCORD_BOT_ID'
                  channels:
                    'default':
                      id: '$BOTKUBE_DISCORD_CHANNEL_ID'
                      notification:
                        disabled: false
                      bindings:
                        executors:
                          - kubectl-read-only
                        sources:
                          - k8s-err-events
                          - k8s-recommendation-events
                  notification:
                    type: short
                elasticsearch:
                  enabled: false
                webhook:
                  enabled: false
      EOF
    ignore_error: true

  kubeconfig:
    vars:
      KUBE:
        sh: cat $KUBECONFIG
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: botkube-kubeconfig
        namespace: monitoring
      data:
        config: {{ .KUBE | b64enc }}
      EOF
    ignore_error: true

  wakapi:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: wakapi-vars
        namespace: services
      stringData:
        WAKAPI_PASSWORD_SALT: "$WAKAPI_PASSWORD_SALT"
        WAKAPI_DB_HOST: "$WAKAPI_DB_HOST"
        WAKAPI_DB_PORT: "$WAKAPI_DB_PORT"
        WAKAPI_DB_NAME: "$WAKAPI_DB_NAME"
        WAKAPI_MAIL_SENDER: "$WAKAPI_MAIL_SENDER"
        WAKAPI_MAIL_SMTP_HOST: "$SMTP_HOST"
        WAKAPI_MAIL_SMTP_PORT: "$SMTP_PORT"
        WAKAPI_MAIL_SMTP_USER: "$SMTP_USER"
        WAKAPI_MAIL_SMTP_PASS: "$SMTP_PASS"
      EOF
    ignore_error: true

  rss:gen:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: rssgen-vars
        namespace: rss
      stringData:
        TOKEN_SECRET: "$RSS_GEN_TOKEN_SECRET"
      EOF
    ignore_error: true

  rss:hub:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: rsshub-vars
        namespace: rss
      stringData:
        HTTP_BASIC_AUTH_NAME: "$RSS_HUB_USERNAME"
        HTTP_BASIC_AUTH_PASS: "$RSS_HUB_PASSWORD"
        ACCESS_KEY: "$RSS_HUB_ACCESSKEY"
        GITHUB_ACCESS_TOKEN: "$GH_PASS"
        GOOGLE_FONTS_API_KEY: "$GOOGLE_FONTS_API_KEY"
        IG_USERNAME: "$INSTAGRAM_USERNAME"
        IG_PASSWORD: "$INSTAGRAM_PASSWORD"
        IG_PROXY: "$INSTAGRAM_PROXY"
        LASTFM_API_KEY: "$LASTFM_API_KEY"
        SPOTIFY_CLIENT_ID: "$SPOTIFY_CLIENT_ID"
        SPOTIFY_REFRESHTOKEN: "$SPOTIFY_REFRESHTOKEN"
        YOUTUBE_KEY: "$YOUTUBE_KEY"
        YOUTUBE_CLIENT_ID: "$YOUTUBE_CLIENT_ID"
        YOUTUBE_CLIENT_SECRET: "$YOUTUBE_CLIENT_SECRET"
        YOUTUBE_REFRESH_TOKEN: "$YOUTUBE_REFRESH_TOKEN"
      EOF
    ignore_error: true

  wyze:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: wyze-vars
        namespace: homeassistant
      stringData:
        WYZE_EMAIL: "$WYZE_EMAIL"
        WYZE_PASSWORD: "$WYZE_PASSWORD"
        TOTP_KEY: "$WYZE_TOTP_KEY"
      EOF
    ignore_error: true

  metabase:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: metabase-vars
        namespace: services
      stringData:
        MB_DB_DBNAME: "$MB_DB_DBNAME"
        MB_DB_PORT: "$MB_DB_PORT"
        MB_DB_USER: "$MB_DB_USER"
        MB_DB_PASS: "$MB_DB_PASS"
        MB_ADMIN_EMAIL: "MB_ADMIN_EMAIL"
        MB_EMAIL_FROM_ADDRESS: "$MB_EMAIL_FROM_ADDRESS"
        MB_EMAIL_SMTP_HOST: "$SMTP_HOST"
        MB_EMAIL_SMTP_PASSWORD: "$SMTP_PASS"
        MB_EMAIL_SMTP_PORT: "$SMTP_PORT"
        MB_EMAIL_SMTP_USERNAME: "$SMTP_USER"
        MB_EMBEDDING_SECRET_KEY: "$MB_EMBEDDING_SECRET_KEY"
        MB_ENCRYPTION_SECRET_KEY: "$MB_ENCRYPTION_SECRET_KEY"
      EOF
    ignore_error: true

  image-updater:
    vars:
      ARGOCD_TOKEN:
        sh: cat config/argo-token.yaml
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-image-updater-secret
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-image-updater-secret
          app.kubernetes.io/part-of: argocd-image-updater
      type: Opaque
      data:
        argocd.token:  "{{ .ARGOCD_TOKEN | b64enc }}"
      EOF
    - kubectl apply -f config/argo-secret.yaml
    - kubectl -n argocd rollout restart deployment argocd-image-updater
    - rm config/argo-secret.yaml
    - rm test-argo-token.yaml
    ignore_error: true

  ha:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: ha-secrets
        namespace: homeassistant
      type: Opaque
      stringData:
        secrets.yaml: |
          server_address: $INTERNAL_IPV4
          public_ip: $EXTERNAL_IPV4

          # Samsung
          #tv_ipv4: $SAMSUNG_IPV4
          #tv_mac: $SAMSUNG_MAC
          # Steam
          steam_api_key: $STEAM_API_KEY
          # LastFM
          lastfm_api_key: $LASTFM_API_KEY
          # IFTTT Integration
          #ifttt_api_key: $IFTTT_API_KEY
          # Twitch
          twitch_client_id: $TWITCH_CLIENT_ID
          twitch_client_secret: $TWITCH_CLIENT_SECRET
          twitch_token: $TWITCH_CLIENT_TOKEN

          # Vultr
          vultr_api_key: $VULTR_API_KEY
          # Sonarr
          sonarr_api_key: $SONARR_API_KEY
          # Unifi
          unifi_host: $UNIFI_IPV4
          unifi_password: $UNIFI_PASSWORD
          # iCloud3
          icloud_username: $ICLOUD_USERNAME
          icloud_password: $ICLOUD_PASSWORD

          # Alpha Vantage Exchange Integration
          alpha_vantage_api_key: $ALPHA_API_KEY
          # PostgreSQL Database
          external_database: $DB_STRING

          ha_latitude:  $HA_LATITUDE
          ha_longitude: $HA_LONGITUDE
          ha_elevation: $HA_ELEVATION

          # Accuweather Integration
          accuweather_api_key: $ACCUWEATHER_API_KEY
          # OpenWeatherMap Integration
          openweathermap_api_key: $OPENWEATHERMAP_API_KEY

          # Apex Charts Integration
          apexcharts_tibber: ""
          apexcharts_influx: ""
          apexcharts_github: ""

          youtube_token: ""

          # SMTP Integration
          smtp_server: $SMTP_HOST
          smtp_sender: $HA_SENDER_EMAIL
          smtp_username: $SMTP_USER
          smtp_password: $SMTP_PASS
          smtp_recipient1: $HA_RECIPIENT_EMAIL_1
          smtp_recipient2: $HA_RECIPIENT_EMAIL_2
      EOF
    ignore_error: true

  infra:
    cmds:
    - |
      kubectl apply -f - << EOF config/infra-secret.yaml
      apiVersion: v1
      kind: Secret
      metadata:
        name: infra-admin-credentials
        namespace: kube-system
      type: Opaque
      stringData:
        INFRA_ADMIN_PASSWORD: "$INFRA_ADMIN_PASSWORD"
        INFRA_CLUSTER_IP: "$INFRA_CLUSTER_IP"
        INFRA_ADMIN_KEY: "$INFRA_ADMIN_KEY"
        INFRA_ADMIN_USERNAME: "$INFRA_ADMIN_USERNAME"
      EOF
    ignore_error: true

  aws:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: aws-secret
        namespace: kube-system
      stringData:
        key_id: "$AWS_KEY_ID"
        access_key: "$AWS_SECRET_KEY"
      EOF
    ignore_error: true

  digitalocean:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: digitalocean
        namespace: kube-system
      stringData:
        access-token: "$DIGITALOCEAN_ACCESS_TOKEN"
      EOF
    ignore_error: true

  vultr:
    cmds:
    - |
      kubectl apply -f - << EOF config/vultr-secret.yaml
      apiVersion: v1
      kind: Secret
      metadata:
        name: vultr-csi
        namespace: kube-system
      stringData:
        # Replace the api-key with a proper value
        api-key: "$VULTR_API_KEY"
      EOF
    ignore_error: true

  ssh:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: git-vars
        namespace: homeassistant
      stringData:
        GIT_SYNC_SSH_KNOWN_HOSTS_FILE: "$SSH_KNOWN_HOSTS"
        GIT_SYNC_SSH_KEY_FILE: "$SSH_KEY_FILE"
      EOF
    - kubectl create secret generic ssh-key --from-file=id_ed25519=id_ed25519 -n homeassistant
    - kubectl create secret generic known-hosts --from-file=known_hosts=known_hosts -n homeassistant
    ignore_error: true

  pixie:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: pl-deploy-secrets
        namespace: monitoring
      stringData:
        deploy-key: "$PIXIE_DEPLOY_KEY"
      EOF
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: pl-cluster-secrets
        namespace: monitoring
      stringData:
        sentry-dsn: ""
      EOF
    ignore_error: true

  sealed:
    cmds:
    - kubectl create namespace secrets
    - kubectl apply -k apps/monitoring/sealed-secrets
    ignore_error: true

  gen:
    cmds:
    - task: kuma
    - task: botkube
    - task: kubeconfig
    - task: rss:gen
    - task: rss:hub
    - task: metabase
    - task: ha
    - task: infra
    - task: ssh
